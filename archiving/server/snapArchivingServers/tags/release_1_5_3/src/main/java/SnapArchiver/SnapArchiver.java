//+============================================================================
// $Source: /cvsroot/tango-cs/tango/jserver/snapshoting/SnapArchiver/SnapArchiver.java,v $
//
// project :     Tango Device Server
//
// Description: java source code for the SnapArchiver class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the SnapArchiver are implemented
//              in this file.
//
// $Author: pierrejoseph $
//
// $Revision: 1.18 $
//
// $Log: SnapArchiver.java,v $
// Revision 1.18  2007/05/11 13:58:53  pierrejoseph
// Attribute addition : release version
//
// Revision 1.17  2007/04/25 12:19:51  ounsy
// *** empty log message ***
//
// Revision 1.16  2007/04/06 09:40:39  ounsy
// refactoring
//
// Revision 1.15  2007/04/05 09:54:17  ounsy
// added the beansFileName property
//
// Revision 1.14  2007/04/04 13:45:30  ounsy
// new LaunchSnapShot command management
//
// Revision 1.13.2.3  2007/03/27 09:25:18  ounsy
// removed logs
//
// Revision 1.13.2.2  2007/03/14 15:47:32  ounsy
// new LaunchSnapShot implementation
//
// Revision 1.13.2.1  2007/03/05 10:14:15  ounsy
// test branche
//
// Revision 1.13  2007/03/02 07:54:57  ounsy
// extend DeviceImpl instead of DeviceImplWithShutdownRunnable
//
// Revision 1.12  2006/11/20 09:38:54  ounsy
// minor changes
//
// Revision 1.11  2006/11/13 15:58:06  ounsy
// all java devices now inherit from UnexportOnShutdownDeviceImpl instead of from DeviceImpl
//
// Revision 1.10  2006/06/15 08:41:17  ounsy
// minor changes
//
// Revision 1.9  2006/04/12 15:45:41  ounsy
// corrected the missing attributes problem
//
// Revision 1.8  2006/03/27 13:57:18  ounsy
// organized imports
//
// Revision 1.7  2005/11/29 17:33:03  chinkumo
// no message
//
// Revision 1.6.2.2  2005/11/29 16:16:50  chinkumo
// Code reformated (pogo compatible)
//
// Revision 1.6.2.1  2005/11/15 13:46:17  chinkumo
// ...
//
// Revision 1.6  2005/08/19 14:03:47  chinkumo
// no message
//
// Revision 1.5  2005/06/28 09:10:11  chinkumo
// Changes made to improve the management of exceptions were reported here.
//
// Revision 1.4  2005/06/15 14:02:53  chinkumo
// The device was regenerated in Tango V5.
//
// Revision 1.3  2005/01/26 17:03:59  chinkumo
// Ultimate synchronization before real sharing.
//
// Revision 1.2  2004/12/06 17:30:44  chinkumo
// Renaming package 'TangoSnap' into 'TangoSnapshoting'
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//          This file is generated by POGO
//  (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package SnapArchiver;

import java.util.Hashtable;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;
import fr.soleil.snapArchivingApi.SnapManagerApi.ISnapManager;
import fr.soleil.snapArchivingApi.SnapManagerApi.SnapManagerApi;
import fr.soleil.snapArchivingApi.SnapManagerApi.SnapManagerImpl;
import fr.soleil.snapArchivingApi.SnapshotingApi.ConfigConst;
import fr.soleil.snapArchivingApi.SnapshotingTools.Tools.SnapContext;
import fr.soleil.snapArchivingApi.SnapshotingTools.Tools.SnapshotingException;

/**
 * Class Description: Device of Snapshoting system
 * 
 * @author $Author: pierrejoseph $
 * @version $Revision: 1.18 $
 */

// --------- Start of States Description ----------
/*
 * Device States Description:
 */
// --------- End of States Description ----------
public class SnapArchiver extends DeviceImpl
/* WithShutdownRunnable */implements TangoConst {
	protected int state;
	// protected SnapshotPersistenceManager manager;
	protected ISnapManager m_manager;
	private String m_version;

	// --------- Start of attributes data members ----------

	// --------- End of attributes data members ----------

	// --------- Start of properties data members ----------

	/**
	 * Computer identifier on wich is settled the database HDB. The identifier
	 * can be the computer name or its IP address. <br>
	 * <b>Default value : </b> localhost.
	 */
	String dbHost;
	/**
	 * Database name.<br>
	 * <b>Default value : </b> hdb
	 */
	String dbName;
	/**
	 * Database schema name.<br>
	 * <b>Default value : </b> snap
	 */
	String dbSchema;

	/**
	 * User identifier (name) used to connect the database for snapshots. <br>
	 * <b>Default value : </b> archiver
	 */
	String dbUser;
	/**
	 * Password used to connect the database for snapshots. <br>
	 * <b>Default value : </b> archiver
	 */
	String dbPassword;
	// /**
	// * The name of the spring beans file <br><b>Default value : </b> beans.xml
	// */
	// String beansFileName;
	// --------- End of properties data members ----------

	// Add your own data members here
	// private DataBaseAPI snapDb;

	// CLA
	private Hashtable collectorsForSnapshots = new Hashtable();

	// --------------------------------------

	// =========================================================
	/**
	 * Constructor for simulated Time Device Server.
	 * 
	 * @param cl
	 *            The DeviceClass object
	 * @param s
	 *            The Device name.
	 * @param version
	 *            The device version
	 */
	// =========================================================
	SnapArchiver(DeviceClass cl, String s, String version) throws DevFailed {
		super(cl, s);
		m_version = version;
		init_device();
	}

	// =========================================================
	/**
	 * Constructor for simulated Time Device Server.
	 * 
	 * @param cl
	 *            The DeviceClass object
	 * @param s
	 *            The Device name.
	 * @param d
	 *            Device description.
	 * @param version
	 *            The device version
	 */
	// =========================================================
	SnapArchiver(DeviceClass cl, String s, String d, String version)
			throws DevFailed {
		super(cl, s, d);
		m_version = version;
		init_device();
	}

	// =========================================================
	/**
	 * Initialize the device.
	 */
	// =========================================================
	public void init_device() throws DevFailed {
		System.out.println("SnapArchiver() create " + device_name);

		// Initialise variables to default values
		// -------------------------------------------
		get_device_property();
		try {
			SnapManagerApi.SnapshotingConfigure(dbUser, dbUser);
			m_manager = new SnapManagerImpl(dbUser, dbUser, true);
		} catch (SnapshotingException e) {
			get_logger().warn(e.toString(), e);
			throw e.toTangoException();
		}

		set_state(DevState.ON);
	}

	// ===================================================================
	/**
	 * Read the device properties from database.
	 */
	// ===================================================================
	public void get_device_property() throws DevFailed {
		// Initialize your default values here.
		// ------------------------------------------
		dbUser = ConfigConst.default_sauser;
		dbPassword = ConfigConst.default_sapasswd;
		// beansFileName = ConfigConst.default_sabeansfilename;

		// Read device properties from database.(Automatic code generation)
		// -------------------------------------------------------------
		if (Util._UseDb == false)
			return;
		String[] propnames = { "DbHost", "DbName", "DbSchema", "DbUser",
				"DbPassword" };

		// Call database and extract values
		// --------------------------------------------
		DbDatum[] dev_prop = get_db_device().get_property(propnames);
		SnapArchiverClass ds_class = (SnapArchiverClass) get_device_class();
		int i = -1;
		// Extract DbHost value
		if (dev_prop[++i].is_empty() == false)
			dbHost = dev_prop[i].extractString();
		else {
			// Try to get value from class property
			DbDatum cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty() == false)
				dbHost = cl_prop.extractString();
		}
		// Extract DbName value
		if (dev_prop[++i].is_empty() == false)
			dbName = dev_prop[i].extractString();
		else {
			// Try to get value from class property
			DbDatum cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty() == false)
				dbName = cl_prop.extractString();
		}
		// Extract DbSchema value
		if (dev_prop[++i].is_empty() == false)
			dbSchema = dev_prop[i].extractString();
		else {
			// Try to get value from class property
			DbDatum cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty() == false)
				dbSchema = cl_prop.extractString();
		}

		// Extract DbUser value
		if (dev_prop[++i].is_empty() == false)
			dbUser = dev_prop[i].extractString();
		else {
			// Try to get value from class property
			DbDatum cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty() == false)
				dbUser = cl_prop.extractString();
		}

		// Extract DbPassword value
		if (dev_prop[++i].is_empty() == false)
			dbPassword = dev_prop[i].extractString();
		else {
			// Try to get value from class property
			DbDatum cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty() == false)
				dbPassword = cl_prop.extractString();
		}

		// // Extract BeansFileName value
		// if ( dev_prop[ ++i ].is_empty() == false )
		// beansFileName = dev_prop[ i ].extractString();
		// else
		// {
		// // Try to get value from class property
		// DbDatum cl_prop = ds_class.get_class_property(dev_prop[ i ].name);
		// if ( cl_prop.is_empty() == false ) beansFileName =
		// cl_prop.extractString();
		// }
		// End of Automatic code generation
		// -------------------------------------------------------------

	}

	// =========================================================
	/**
	 * Method always executed before command execution.
	 */
	// =========================================================
	public void always_executed_hook() {
		get_logger().info("In always_executed_hook method()");
	}

	// //=========================================================
	// /**
	// * Execute command "LaunchSnapShot" on device.
	// * This command is used to trigger a snapShot.
	// * All informations concerning the snapshot will be retrieved with the
	// identifier parameter.
	// *
	// * @param argin The snapshot associated context's identifier.
	// */
	// //=========================================================
	// public synchronized short launch_snap_shot(short argin) throws DevFailed
	// {
	// Timestamp startDate = new Timestamp ( System.currentTimeMillis() );
	// get_logger().info("Entering launch_snap_shot()");
	//        
	// // ---Add your Own code to control device here ---
	// SnapShot snapShot = null;
	// short snapId = 0;
	// SnapshotingException snapshotingException = new SnapshotingException();
	// try
	// {
	// snapShot = SnapManagerApi.registerSnapShot(( int ) argin);
	// snapId = (short) snapShot.getId_snap ();
	// // For each attribute of the object 'Snapshot', a snapshot is
	// triggered...
	// ArrayList attributeList = snapShot.getAttribute_List();
	//            
	// UsePluginBuilder builder = new UsePluginBuilder ( snapId , manager );
	// UsePlugin group = builder.build ( attributeList );
	// group.execute();
	// Map<String, String> messages =group.getMessages ();
	// }
	// catch ( SnapshotingException e )
	// {
	// e.printStackTrace();
	// Util.out2.println(e.toString());
	// throw e.toTangoException();
	// }
	// catch ( Exception e )
	// {
	// e.printStackTrace();
	// }
	//        
	// if ( snapshotingException.stackSize() != 0 )
	// {
	// Util.out2.println(snapshotingException.toString());
	// throw snapshotingException.toTangoException();
	// }
	//
	// return snapId;
	// }

	// =========================================================
	/**
	 * Execute command "CreateNewContext" on device. This command is used to
	 * register a snapShot context. All informations concerning the snapshot
	 * (fr.soleil.snapArchivingApi.SnapshotingTools.Tools.SnapContext) are
	 * passed through an array (DEVVAR_STRINGARRAY).
	 * 
	 * @param argin
	 *            All the informations usefull to create a context ,Snapshot
	 *            pattern).
	 */
	// =========================================================
	public void create_new_context(String[] argin) throws DevFailed {
		get_logger().info("Entering create_new_context()");

		// ---Add your Own code to control device here ---
		SnapContext snapContext = new SnapContext(argin);
		try {
			SnapManagerApi.createContext(snapContext);
		} catch (SnapshotingException e) {
			get_logger().warn(e.toString(), e);
			throw e.toTangoException();
		}
		get_logger().info("Exiting create_new_context()");
	}

	// ===================================================================
	/**
	 * Method called by the read_attributes CORBA operation to set internal
	 * attribute value.
	 * 
	 * @param attr
	 *            reference to the Attribute object
	 */
	// ===================================================================
	public void read_attr(Attribute attr) throws DevFailed {
		String attr_name = attr.get_name();
		get_logger().info("In read_attr for attribute " + attr_name);

		// Switch on attribute name
		// ---------------------------------
		if (attr_name == "version") {
			// Add your own code here
			attr.set_value(m_version);
		}
	}

	// =========================================================
	/**
	 * main part for the device server class
	 */
	// =========================================================
	public static void main(String[] argv) {
		try {
			Util tg = Util.init(argv, "SnapArchiver");
			tg.server_init();

			System.out.println("Ready to accept request");

			tg.server_run();
		} catch (OutOfMemoryError ex) {
			System.err.println("Can't allocate memory !!!!");
			System.err.println("Exiting");
		} catch (UserException ex) {
			Except.print_exception(ex);

			System.err.println("Received a CORBA user exception");
			System.err.println("Exiting");
		} catch (SystemException ex) {
			Except.print_exception(ex);

			System.err.println("Received a CORBA system exception");
			System.err.println("Exiting");
		}

		System.exit(-1);
	}
	/**
     * 
     */
}

// --------------------------------------------------------------------------
/*
 * end of $Source:
 * /cvsroot/tango-cs/tango/jserver/snapshoting/SnapArchiver/SnapArchiver.java,v
 * $
 */
