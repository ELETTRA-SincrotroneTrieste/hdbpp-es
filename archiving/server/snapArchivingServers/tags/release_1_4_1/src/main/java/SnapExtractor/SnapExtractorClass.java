//+======================================================================
// $Source: /cvsroot/tango-cs/tango/jserver/snapshoting/SnapExtractor/SnapExtractorClass.java,v $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the SnapExtractor class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  SnapExtractor object
//              It inherits from the DeviceClass class.
//
// $Author: pierrejoseph $
//
// $Revision: 1.3 $
//
// $Log: SnapExtractorClass.java,v $
// Revision 1.3  2007/05/11 13:58:54  pierrejoseph
// Attribute addition : release version
//
// Revision 1.2  2006/03/27 13:58:18  ounsy
// added the commands removeAllDynAttr et removeDynAttrs
//
// Revision 1.1  2006/02/07 13:03:52  ounsy
// moved from the Archiving package
//
// Revision 1.1  2006/01/27 14:39:14  ounsy
// new device for snap extracting
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package SnapExtractor;

import java.util.ResourceBundle;
import java.util.Vector;

import fr.esrf.Tango.AttrWriteType;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attr;
import fr.esrf.TangoDs.Command;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;

public class SnapExtractorClass extends DeviceClass implements TangoConst
{
	/**
	 *	SnapExtractorClass class instance (it is a singleton).
	 */
	private static SnapExtractorClass	_instance = null;

	/**
	 *	Class properties array.
	 */
	private DbDatum[]	cl_prop = null;

	//--------- Start of properties data members ----------


//--------- End of properties data members ----------


//===================================================================			
//
// method : 		instance()
// 
// description : 	static method to retrieve the SnapExtractorClass object 
//					once it has been initialised
//
//===================================================================			
	public static SnapExtractorClass instance()
	{
		if (_instance == null)
		{
			System.err.println("SnapExtractorClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

//===================================================================			
//
// method : 		Init()
// 
// description : 	static method to create/retrieve the SnapExtractorClass
//					object. This method is the only one which enables a 
//					user to create the object
//
// in :			- class_name : The class name
//
//===================================================================			
	public static SnapExtractorClass init(String class_name) throws DevFailed
	{
		if (_instance == null)
		{
			_instance = new SnapExtractorClass(class_name);
		}
		return _instance;
	}
	
//===================================================================			
//
// method : 		SnapExtractorClass()
// 
// description : 	constructor for the SnapExtractorClass class
//
// argument : in : 	- name : The class name
//
//===================================================================			
	protected SnapExtractorClass(String name) throws DevFailed
	{
		super(name);

		Util.out2.println("Entering SnapExtractorClass constructor");
		write_class_property();
		get_class_property();
	
		Util.out2.println("Leaving SnapExtractorClass constructor");
	}
	
//===================================================================			
//
// method : 		command_factory()
// 
// description : 	Create the command object(s) and store them in the
//					command list
//===================================================================			
	public void command_factory()
	{
	    command_list.addElement(new RemoveAllDynAttrClass("RemoveAllDynAttr",
	            Tango_DEV_VOID, Tango_DEV_VOID,
				"",
				"",
				DispLevel.EXPERT));
	    
	    command_list.addElement(new RemoveDynAttrsClass("RemoveDynAttrs",
	            Tango_DEVVAR_STRINGARRAY, Tango_DEV_VOID,
				"",
				"",
				DispLevel.OPERATOR));
	    
	    command_list.addElement(new GetSnapClass("GetSnap",
			Tango_DEV_LONG, Tango_DEVVAR_STRINGARRAY,
			"snapID",
			"[attrRealName, dynAttrNameW,dynAttrNameR]*n",
			DispLevel.OPERATOR));
		
		command_list.addElement(new RemoveDynAttrClass("RemoveDynAttr",
				Tango_DEV_STRING, Tango_DEV_VOID,
				"",
				"",
				DispLevel.OPERATOR));
		
		command_list.addElement(new GetSnapsForContextClass("GetSnapsForContext",
		        Tango_DEV_LONG, Tango_DEVVAR_LONGSTRINGARRAY,
				"",
				"",
				DispLevel.OPERATOR));

		//	add polling if any
		for (int i=0 ; i<command_list.size(); i++)
		{
			Command	cmd = (Command)command_list.elementAt(i);
		}
	}

//	=============================================================================
//
//			Method:	attribute_factory(Vector att_list)
//
//		=============================================================================
	public void attribute_factory(Vector att_list) throws DevFailed
	{
	   //  Attribute : version
	   Attr version = new Attr("version" , Tango_DEV_STRING , AttrWriteType.READ);
	   att_list.addElement(version);
	}
	
//===================================================================			
//
// method : 		device_factory()
// 
// description : 	Create the device object(s) and store them in the 
//					device list
//
// argument : in : 	String[] devlist : The device name list
//
//===================================================================			
	public void device_factory(String[] devlist) throws DevFailed
	{
		String device_version = ResourceBundle.getBundle("application").getString("project.version");
		
		for (int i=0 ; i<devlist.length ; i++)
		{
		//	Util.out4.println("Device name : " + devlist[i]);
						
			// Create device and add it into the device list
			//----------------------------------------------
			device_list.addElement(new SnapExtractor(this, devlist[i],device_version));

			// Export device to the outside world
			//----------------------------------------------
			if (Util._UseDb == true)
				export_device(((DeviceImpl)(device_list.elementAt(i))));
			else
				export_device(((DeviceImpl)(device_list.elementAt(i))), devlist[i]);
		}
	}

//===================================================================
/**
 *	Get the class property for specified name.
 *
 *	@param name The property name.
 */
//===================================================================
	public DbDatum get_class_property(String name)
	{
		for (int i=0 ; i<cl_prop.length ; i++)
			if (cl_prop[i].name.equals(name))
				return cl_prop[i];
		//	if not found, return  an empty DbDatum
		return new DbDatum(name);
	}

//===================================================================
/**
 *	Read the class properties from database.
 */
//===================================================================			
	public void get_class_property() throws DevFailed
	{
		//	Initialize your default values here.
		//------------------------------------------


		//	Read class properties from database.(Automatic code generation)
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
			};

		//	Call database and extract values
		//--------------------------------------------
		cl_prop = get_db_class().get_property(propnames);
		int	i = -1;

		//	End of Automatic code generation
		//-------------------------------------------------------------

	}

//===================================================================
/**
 *	Set class description as property in database
 */
//===================================================================			
	private void write_class_property() throws DevFailed
	{	
		//	First time, check if database used
		//--------------------------------------------
		if (Util._UseDb == false)
			return;

		//	Prepeare DbDatum
		//--------------------------------------------
		DbDatum[]	data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("Tango Device Server");

		data[1] = new DbDatum("Description");
		data[1].insert("SnapExtractor");

		//	Call database and and values
		//--------------------------------------------
		get_db_class().put_property(data);
	}

}
