// +======================================================================
// $Source:
// /cvsroot/tango-cs/tango/jserver/archiving/HdbArchiver/HdbArchiverClass.java,v
// $
//
// Project: Tango Device Server
//
// Description: java source code for the HdbArchiver class .
// This class is a singleton class and implements everything
// which exists only once for all the HdbArchiver object
// It inherits from the DeviceClass class.
//
// $Author: ounsy $
//
// $Revision: 1.12 $
//
// $Log: HdbArchiverClass.java,v $
// Revision 1.12 2006/08/23 09:41:23 ounsy
// minor changes
//
// Revision 1.11 2006/07/25 13:22:32 ounsy
// added a "version" attribute
//
// Revision 1.10 2006/03/08 14:36:21 ounsy
// added pogo comments
//
// Revision 1.9 2006/02/15 13:11:31 ounsy
// organized imports
//
// Revision 1.8 2006/02/15 12:49:55 ounsy
// added support for HdbArchiver internal support
//
// Revision 1.7 2006/02/06 13:00:46 ounsy
// new commands RetryForAttribute and RetryForAttributes
//
// Revision 1.6 2006/01/27 13:06:40 ounsy
// organised imports
//
// Revision 1.5 2005/11/29 17:33:53 chinkumo
// no message
//
// Revision 1.4.12.3 2005/11/29 16:16:05 chinkumo
// Code reformated (pogo compatible)
//
// Revision 1.4.12.2 2005/11/15 13:46:08 chinkumo
// ...
//
// Revision 1.4.12.1 2005/09/26 08:01:20 chinkumo
// Minor changes !
//
// Revision 1.4 2005/06/15 13:58:48 chinkumo
// The device was regenerated in Tango V5.
//
//
// copyleft : European Synchrotron Radiation Facility
// BP 220, Grenoble 38043
// FRANCE
//
// -======================================================================
//
// This file is generated by POGO
// (Program Obviously used to Generate tango Object)
//
// (c) - Software Engineering Group - ESRF
// =============================================================================

package HdbArchiver;

import java.util.ResourceBundle;
import java.util.Vector;

import fr.esrf.Tango.AttrWriteType;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attr;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;
import fr.soleil.hdbtdbArchivingApi.ArchivingTools.Mode.ShortPeriodAttributesManager;
import fr.soleil.hdbtdbArchivingApi.ArchivingTools.Tools.ArchivingException;

public class HdbArchiverClass extends DeviceClass implements TangoConst {

	/**
	 * HdbArchiverClass class instance (it is a singleton).
	 */
	private static HdbArchiverClass _instance = null;

	/**
	 * Class properties array.
	 */
	private DbDatum[] cl_prop = null;

	// --------- Start of properties data members ----------

	/**
	 * Computer identifier on wich is settled the database HDB. The identifier
	 * can be the computer name or its IP address. <br>
	 * <b>Default value : </b> localhost
	 */
	String dbHost;
	/**
	 * Database name.<br>
	 * <b>Default value : </b> hdb
	 */
	String dbName;
	/**
	 * true if the 'facility' information is appended to all device's (or
	 * attributes) name. false otherwise.<br>
	 * <b>Default value : </b> false
	 */
	boolean facility;

	/**
	 * true if the ORACLE RAC connection is activated. This information is
	 * appended to all device's (or attributes) name. false otherwise.<br>
	 * <b>Default value : </b> false
	 */
	boolean RacConnection;

	// --------- End of properties data members ----------

	// ===================================================================
	//
	// method : instance()
	//
	// description : static method to retrieve the HdbArchiverClass object
	// once it has been initialised
	//
	// ===================================================================
	public static HdbArchiverClass instance() {
		if (_instance == null) {
			System.err.println("HdbArchiverClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : Init()
	//
	// description : static method to create/retrieve the HdbArchiverClass
	// object. This method is the only one which enables a
	// user to create the object
	//
	// in : - class_name : The class name
	//
	// ===================================================================
	public static synchronized HdbArchiverClass init(String class_name) throws DevFailed {
		if (_instance == null) {
			try {
				// First call to this method.
				// It initializes the short period attributes map
				ShortPeriodAttributesManager.getShortPeriodAttributes();
			} catch (ArchivingException e) {
				e.printStackTrace();
				throw new DevFailed();
			}
			_instance = new HdbArchiverClass(class_name);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : HdbArchiverClass()
	//
	// description : constructor for the HdbArchiverClass class
	//
	// argument : in : - name : The class name
	//
	// ===================================================================
	protected HdbArchiverClass(String name) throws DevFailed {
		super(name);

		Util.out2.println("Entering HdbArchiverClass constructor");
		write_class_property();
		get_class_property();

		Util.out2.println("Leaving HdbArchiverClass constructor");
	}

	// ===================================================================
	//
	// method : command_factory()
	//
	// description : Create the command object(s) and store them in the
	// command list
	// ===================================================================
	@Override
	public void command_factory() {
		command_list.addElement(new GetErrorDomainsInternal("GetErrorDomainsInternal", Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY, "",
				"The list of all domains that have at least one attribute not correctly archiving", DispLevel.OPERATOR));

		command_list.addElement(new GetErrorsForDomainInternal("GetErrorsForDomainInternal", Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY, "The domain name",
				"The list of all KO attributes for this domain", DispLevel.OPERATOR));

		command_list.addElement(new GetErrorsForAttributeInternal("GetErrorsForAttributeInternal", Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY, "The attribute name (NOT the complete name)",
				"The list of all KO attributes sharing this name", DispLevel.OPERATOR));

		command_list.addElement(new IsAttributeCorrectlyArchivedInternal("IsAttributeCorrectlyArchivedInternal", Tango_DEV_STRING, Tango_DEV_BOOLEAN, "The complete name of the attribute",
				"True if this attribute is archiving correctly", DispLevel.OPERATOR));

		command_list.addElement(new RetryForKOAttributes("RetryForKOAttributes", Tango_DEV_VOID, Tango_DEV_SHORT, "",
				"A return code, can be either: 10 (the archiver isn't in charge of any attribute, or they are all correctly archiving) 20 (the retry succeeded) or 30 (the retry failed)",
				DispLevel.OPERATOR));

		command_list.addElement(new RetryForAll("RetryForAll", Tango_DEV_VOID, Tango_DEV_SHORT, "",
				"A return code, can be either: 10 (the archiver isn't in charge of any attribute) 20 (the retry succeeded) or 30 (the retry failed)", DispLevel.OPERATOR));

		command_list.addElement(new RetryForAttributesCmd("RetryForAttributes", Tango_DEVVAR_STRINGARRAY, Tango_DEV_SHORT, "The complete names of the attributes",
				"A return code, can be either: 10 (the archiver isn't in charge of any of the specified attributes) 20 (the retry succeeded) or 30 (the retry failed)", DispLevel.OPERATOR));

		command_list.addElement(new RetryForAttributeCmd("RetryForAttribute", Tango_DEV_STRING, Tango_DEV_SHORT, "The complete name of the attribute",
				"A return code, can be either: 10 (the archiver isn't in charge of the specified attribute) 20 (the retry succeeded) or 30 (the retry failed)", DispLevel.OPERATOR));

		command_list.addElement(new TriggerArchiveConfCmd("TriggerArchiveConf", Tango_DEVVAR_STRINGARRAY, Tango_DEV_VOID, "The group of attributes to archive", "", DispLevel.OPERATOR));
		command_list.addElement(new TriggerArchiveAttCmd("TriggerArchiveAtt", Tango_DEVVAR_STRINGARRAY, Tango_DEV_VOID, "The attribute to archive", "", DispLevel.OPERATOR));
		command_list.addElement(new TriggerArchiveAttCheckCmd("TriggerArchiveAttCheck", Tango_DEV_STRING, Tango_DEV_VOID, "The name of the attribute to archive", "", DispLevel.OPERATOR));
		command_list.addElement(new StopArchiveConfCmd("StopArchiveConf", Tango_DEVVAR_STRINGARRAY, Tango_DEV_VOID, "The group of attributes", "", DispLevel.OPERATOR));
		command_list.addElement(new StopArchiveAttCmd("StopArchiveAtt", Tango_DEVVAR_STRINGARRAY, Tango_DEV_VOID, "the attribute on witch archiving must be stopped", "", DispLevel.OPERATOR));
		command_list.addElement(new StateDetailedClass("StateDetailed", Tango_DEV_VOID, Tango_DEV_STRING, "", "The detailed state", DispLevel.EXPERT));

		// add polling if any
		/*
		 * for (int i = 0; i < command_list.size(); i++) { // Command cmd = (
		 * Command ) command_list.elementAt(i); }
		 */
	}

	// ===================================================================
	//
	// method : device_factory()
	//
	// description : Create the device object(s) and store them in the
	// device list
	//
	// argument : in : String[] devlist : The device name list
	//
	// ===================================================================
	@Override
	public void device_factory(String[] devlist) throws DevFailed {
		String device_version = ResourceBundle.getBundle("application").getString("project.version");

		for (int i = 0; i < devlist.length; i++) {
			// Util.out4.println("Device name : " + devlist[ i ]);

			// Create device and add it into the device list
			// ----------------------------------------------

			device_list.addElement(new HdbArchiver(this, devlist[i], device_version));

			// Export device to the outside world
			// ----------------------------------------------
			if (Util._UseDb == true)
				export_device(((DeviceImpl) (device_list.elementAt(i))));
			else
				export_device(((DeviceImpl) (device_list.elementAt(i))), devlist[i]);
		}
	}

	// =============================================================================
	//
	// Method: attribute_factory(Vector att_list)
	//
	// =============================================================================
	@Override
	public void attribute_factory(Vector att_list) throws DevFailed {
		// Attribute : scalar_charge
		Attr scalar_charge = new Attr("scalar_charge", Tango_DEV_SHORT, AttrWriteType.READ);
		att_list.addElement(scalar_charge);

		// Attribute : spectrum_charge
		Attr spectrum_charge = new Attr("spectrum_charge", Tango_DEV_SHORT, AttrWriteType.READ);
		att_list.addElement(spectrum_charge);

		// Attribute : image_charge
		Attr image_charge = new Attr("image_charge", Tango_DEV_SHORT, AttrWriteType.READ);
		att_list.addElement(image_charge);

		// Attribute : version
		Attr version = new Attr("version", Tango_DEV_STRING, AttrWriteType.READ);
		att_list.addElement(version);

	}

	// ===================================================================
	/**
	 * Get the class property for specified name.
	 * 
	 * @param name
	 *            The property name.
	 */
	// ===================================================================
	public DbDatum get_class_property(String name) {
		for (int i = 0; i < cl_prop.length; i++)
			if (cl_prop[i].name.equals(name))
				return cl_prop[i];
		// if not found, return an empty DbDatum
		return new DbDatum(name);
	}

	// ===================================================================
	/**
	 * Read the class properties from database.
	 */
	// ===================================================================
	public void get_class_property() throws DevFailed {
		// Initialize your default values here.
		// ------------------------------------------

		// Read class properties from database.(Automatic code generation)
		// -------------------------------------------------------------
		if (Util._UseDb == false)
			return;
		String[] propnames = { "DbHost", "DbName", "Facility", "RacConnection" };

		// Call database and extract values
		// --------------------------------------------
		cl_prop = get_db_class().get_property(propnames);
		int i = -1;
		// Extract DbHost value
		if (cl_prop[++i].is_empty() == false)
			dbHost = cl_prop[i].extractString();
		else
			cl_prop[i].insert(dbHost);

		// Extract DbName value
		if (cl_prop[++i].is_empty() == false)
			dbName = cl_prop[i].extractString();
		else
			cl_prop[i].insert(dbName);

		// Extract Facility value
		if (cl_prop[++i].is_empty() == false)
			facility = cl_prop[i].extractBoolean();
		else
			cl_prop[i].insert(facility);

		// Extract RacConnection value
		if (cl_prop[++i].is_empty() == false)
			RacConnection = cl_prop[i].extractBoolean();
		else
			cl_prop[i].insert(RacConnection);

		// End of Automatic code generation
		// -------------------------------------------------------------

	}

	// ===================================================================
	/**
	 * Set class description as property in database
	 */
	// ===================================================================
	private void write_class_property() throws DevFailed {
		// First time, check if database used
		// --------------------------------------------
		if (Util._UseDb == false)
			return;

		// Prepeare DbDatum
		// --------------------------------------------
		DbDatum[] data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("Tango Device Server");

		data[1] = new DbDatum("Description");
		data[1].insert("Device of Archiving system");

		// Call database and and values
		// --------------------------------------------
		get_db_class().put_property(data);
	}

}
