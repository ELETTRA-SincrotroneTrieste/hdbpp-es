//+======================================================================
// $Source: /cvsroot/tango-cs/tango/jserver/archiving/TdbArchivingWatcher/TdbArchivingWatcherClass.java,v $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the ArchivingWatcher class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  ArchivingWatcher object
//              It inherits from the DeviceClass class.
//
// $Author: pierrejoseph $
//
// $Revision: 1.3 $
//
// $Log: TdbArchivingWatcherClass.java,v $
// Revision 1.3  2007/05/11 13:58:53  pierrejoseph
// Attribute addition : release version
//
// Revision 1.2  2006/09/07 15:13:16  ounsy
// added the getAllArchivingAttributes command
//
// Revision 1.1  2006/08/24 13:52:22  ounsy
// creation
//
// Revision 1.4  2006/05/03 09:50:53  ounsy
// added a restart command that does the same as restarting the device
//
// Revision 1.3  2006/03/08 14:36:21  ounsy
// added pogo comments
//
// Revision 1.2  2006/01/27 13:08:18  ounsy
// New commands to start archiving control in absolute/relative mode
//
// Revision 1.1  2006/01/19 16:36:59  ounsy
// New device specialised in watching archiving.
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package TdbArchivingWatcher;

import java.util.ResourceBundle;
import java.util.Vector;

import TdbArchivingWatcher.GetAllArchivingAttributesClass;

import fr.esrf.Tango.AttrWriteType;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attr;
import fr.esrf.TangoDs.Command;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.SpectrumAttr;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.UserDefaultAttrProp;
import fr.esrf.TangoDs.Util;

public class TdbArchivingWatcherClass extends DeviceClass implements TangoConst
{
	/**
	 *	ArchivingWatcherClass class instance (it is a singleton).
	 */
	private static TdbArchivingWatcherClass	_instance = null;

	/**
	 *	Class properties array.
	 */
	private DbDatum[]	cl_prop = null;

	//--------- Start of properties data members ----------


//--------- End of properties data members ----------


//===================================================================			
//
// method : 		instance()
// 
// description : 	static method to retrieve the ArchivingWatcherClass object 
//					once it has been initialised
//
//===================================================================			
	public static TdbArchivingWatcherClass instance()
	{
		if (_instance == null)
		{
			System.err.println("ArchivingWatcherClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

//===================================================================			
//
// method : 		Init()
// 
// description : 	static method to create/retrieve the ArchivingWatcherClass
//					object. This method is the only one which enables a 
//					user to create the object
//
// in :			- class_name : The class name
//
//===================================================================			
	public static TdbArchivingWatcherClass init(String class_name) throws DevFailed
	{
		if (_instance == null)
		{
			_instance = new TdbArchivingWatcherClass(class_name);
		}
		return _instance;
	}
	
//===================================================================			
//
// method : 		ArchivingWatcherClass()
// 
// description : 	constructor for the ArchivingWatcherClass class
//
// argument : in : 	- name : The class name
//
//===================================================================			
	protected TdbArchivingWatcherClass(String name) throws DevFailed
	{
		super(name);

		Util.out2.println("Entering ArchivingWatcherClass constructor");
		write_class_property();
		get_class_property();
	
		Util.out2.println("Leaving ArchivingWatcherClass constructor");
	}
	
//===================================================================			
//
// method : 		command_factory()
// 
// description : 	Create the command object(s) and store them in the
//					command list
//===================================================================			
	public void command_factory()
	{
        command_list.addElement(new GetAllArchivingAttributesClass("GetAllArchivingAttributes",
                Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY,
                "",
                "The list of all TDB archiving attributes",
                DispLevel.OPERATOR));
        command_list.addElement(new RestartClass("Restart",
                Tango_DEV_VOID, Tango_DEV_VOID,
                "",
                "",
                DispLevel.OPERATOR));
        command_list.addElement(new ResetClass("Reset",
			Tango_DEV_VOID, Tango_DEV_VOID,
			"",
			"",
			DispLevel.OPERATOR));
		command_list.addElement(new StartClass("Start",
			Tango_DEV_VOID, Tango_DEV_VOID,
			"",
			"",
			DispLevel.OPERATOR));
		command_list.addElement(new StopClass("Stop",
			Tango_DEV_VOID, Tango_DEV_VOID,
			"",
			"",
			DispLevel.OPERATOR));
		command_list.addElement(new GetReportCurrentClass("GetReportCurrent",
			Tango_DEV_VOID, Tango_DEV_STRING,
			"",
			"The report for the current cycle",
			DispLevel.OPERATOR));
		command_list.addElement(new GetReportLatestErrorClass("GetReportLatestError",
			Tango_DEV_VOID, Tango_DEV_STRING,
			"",
			"The report for the latest KO cycle",
			DispLevel.OPERATOR));
		command_list.addElement(new IsAttributeCorrectlyArchivedCurrentClass("IsAttributeCorrectlyArchivedCurrent",
			Tango_DEV_STRING, Tango_DEV_BOOLEAN,
			"The attribute complete name",
			"True if this attribute is archiving correctly (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new IsAttributeCorrectlyArchivedLatestErrorClass("IsAttributeCorrectlyArchivedLatestError",
			Tango_DEV_STRING, Tango_DEV_BOOLEAN,
			"The attribute complete name",
			"True if archiving works correctly for this attribute (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorArchiversCurrentClass("GetErrorArchiversCurrent",
			Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY,
			"",
			"The list of archivers that have at least one KO attribute (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorArchiversLatestErrorClass("GetErrorArchiversLatestError",
			Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY,
			"",
			"The list of archivers that have at least one KO attribute (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForArchiverCurrentClass("GetErrorsForArchiverCurrent",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The name of the archiver",
			"The list of KO attributes for this archiver (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForArchiverLatestErrorClass("GetErrorsForArchiverLatestError",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The name of the archiver",
			"The list of KO attributes for this archiver (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorDomainsCurrentClass("GetErrorDomainsCurrent",
			Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY,
			"",
			"The list of domains that have at least one KO attribute (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorDomainsLatestErrorClass("GetErrorDomainsLatestError",
			Tango_DEV_VOID, Tango_DEVVAR_STRINGARRAY,
			"",
			"The list of domains that have at least one KO attribute (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForDomainCurrentClass("GetErrorsForDomainCurrent",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The domain name",
			"The list of KO attributes for this domain (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForDomainLatestErrorClass("GetErrorsForDomainLatestError",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The domain name",
			"The list of KO attributes for this domain (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForAttributeCurrentClass("GetErrorsForAttributeCurrent",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The NOT complete name of the attribute",
			"The list of KO attributes for this attribute name (current cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new GetErrorsForAttributeLatestErrorClass("GetErrorsForAttributeLatestError",
			Tango_DEV_STRING, Tango_DEVVAR_STRINGARRAY,
			"The NOT complete name of the attribute",
			"The list of KO attributes for this attribute name (latest KO cycle)",
			DispLevel.OPERATOR));
		command_list.addElement(new StartRelativeClass("StartRelative",
			Tango_DEV_DOUBLE, Tango_DEV_VOID,
			"The multiplier",
			"",
			DispLevel.EXPERT));
		command_list.addElement(new StartAbsoluteClass("StartAbsolute",
			Tango_DEVVAR_LONGARRAY, Tango_DEV_VOID,
			"The absolute mode parameters: argin[0] = the duration amount, argin[1] = the duration nature (1=seconds, 2=minutes, 3=hours)",
			"",
			DispLevel.EXPERT));

		//	add polling if any
		for (int i=0 ; i<command_list.size(); i++)
		{
			Command	cmd = (Command)command_list.elementAt(i);
		}
	}


//===================================================================			
//
// method : 		device_factory()
// 
// description : 	Create the device object(s) and store them in the 
//					device list
//
// argument : in : 	String[] devlist : The device name list
//
//===================================================================			
	public void device_factory(String[] devlist) throws DevFailed
	{
		String device_version = ResourceBundle.getBundle("application").getString("project.version");
		
		for (int i=0 ; i<devlist.length ; i++)
		{
			//Util.out4.println("Device name : " + devlist[i]);
						
			// Create device and add it into the device list
			//----------------------------------------------
			device_list.addElement(new TdbArchivingWatcher(this, devlist[i], device_version));

			// Export device to the outside world
			//----------------------------------------------
			if (Util._UseDb == true)
				export_device(((DeviceImpl)(device_list.elementAt(i))));
			else
				export_device(((DeviceImpl)(device_list.elementAt(i))), devlist[i]);
		}
	}

//=============================================================================
//
//	Method:	attribute_factory(Vector att_list)
//
//=============================================================================
	public void attribute_factory(Vector att_list) throws DevFailed
	{
		//	Attribute : ArchivingHealth
		Attr	archiving_health = 
			new Attr("ArchivingHealth", Tango_DEV_SHORT, AttrWriteType.READ);
		UserDefaultAttrProp	archiving_health_prop = new UserDefaultAttrProp();
		archiving_health_prop.set_description("The archiving health code");
		archiving_health.set_default_properties(archiving_health_prop);
		att_list.addElement(archiving_health);

		//	Attribute : FormattedReport
		SpectrumAttr	formatted_report = 
			new SpectrumAttr("FormattedReport", Tango_DEV_STRING, 10000);
		att_list.addElement(formatted_report);
		
		 //  Attribute : version
		 Attr version = new Attr("version" , Tango_DEV_STRING , AttrWriteType.READ);
		 att_list.addElement(version);
	}

//===================================================================
/**
 *	Get the class property for specified name.
 *
 *	@param name The property name.
 */
//===================================================================
	public DbDatum get_class_property(String name)
	{
		for (int i=0 ; i<cl_prop.length ; i++)
			if (cl_prop[i].name.equals(name))
				return cl_prop[i];
		//	if not found, return  an empty DbDatum
		return new DbDatum(name);
	}

//===================================================================
/**
 *	Read the class properties from database.
 */
//===================================================================			
	public void get_class_property() throws DevFailed
	{
		//	Initialize your default values here.
		//------------------------------------------


		//	Read class properties from database.(Automatic code generation)
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
			};

		//	Call database and extract values
		//--------------------------------------------
		cl_prop = get_db_class().get_property(propnames);
		int	i = -1;

		//	End of Automatic code generation
		//-------------------------------------------------------------

	}

//===================================================================
/**
 *	Set class description as property in database
 */
//===================================================================			
	private void write_class_property() throws DevFailed
	{	
		//	First time, check if database used
		//--------------------------------------------
		if (Util._UseDb == false)
			return;

		//	Prepeare DbDatum
		//--------------------------------------------
		DbDatum[]	data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("null");

		data[1] = new DbDatum("Description");
		data[1].insert("Watches archiving");

		//	Call database and and values
		//--------------------------------------------
		get_db_class().put_property(data);
	}

}
